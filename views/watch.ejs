<html lang="ja">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>SimpleTube</title>
    <link rel="stylesheet" href="../../styles/watch">
</head>

<body>
    <header>
        <h1><a href="/">SimpleTube</a></h1>
        <div class="buttons">
            <input type="text" placeholder="search" id="headerSearch">
            <a href="settings"><img src="../icons/settings" alt="settings"></a>
        </div>
    </header>
    <div id="load-anim">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="48" height="48">
            <circle cx="12" cy="12" r="10" fill="none" stroke="#2589d0" stroke-width="2" stroke-dasharray="63"
                stroke-linecap="round">
                <animate attributeName="stroke-dashoffset" values="63;16;63" keyTimes="0;.5;1"
                    keySplines=".42 0 .58 1;.42 0 .58 1;" calcMode="spline" dur="1.4s" repeatCount="indefinite" />
                <animateTransform attributeName="transform" type="rotate" values="0,12,12;135,12,12;450,12,12"
                    keySplines=".42 0 .58 1;.42 0 .58 1;" calcMode="spline" dur="1.4s" repeatCount="indefinite" />
                <animateTransform attributeName="transform" type="rotate" from="0,12,12" to="270,12,12"
                    calcMode="linear" dur="1.4s" repeatCount="indefinite" additive="sum" />
            </circle>
        </svg>
    </div>
    <div id="video-content">
        <main>
            <div class="watch">
                <div class="video">
                    <img src="" alt="Thumbnail" id="video-thumbnail" onload="thumbnailLoaded()">
                </div>
                <div class="video-info">
                    <div>
                        <p class="title" id="video-title"></p>
                    </div>

                    <div class="statistics">
                        <p id="view-count"></p>
                        <p id="release-date"></p>
                        <img src="../../icons/good" alt="good: ">
                        <p id="like-count"></p>
                    </div>
                    <div class="channel-info">
                        <div class="channel">
                            <img src="" alt="" class="icon" id="author-icon">
                            <p id="author"></p>
                            <img src="../../icons/verified" alt="verified" class="verified">
                            <p id="subCountText"></p>
                        </div>
                        <button type="button" onclick="channelbtn()">チャンネルを見る</button>
                    </div>
                    <pre class="desc" id="desc"></pre>
                </div>
        </main>
        <div class="other">
            <!-- コメントと関連動画 -->
            <div class="comments" id="comments">
                <h2>コメント</h2>
                <noscript>
                    <p>コメントを読み込むにはjsを有効にしてください。</p>
                </noscript>
            </div>
            <div class="recommended" id="recommended">
                <h2>関連動画</h2>
            </div>
        </div>
    </div>
</body>
<script>
    const circle = document.querySelector('circle');
    circle.style.animationPlayState = 'running';
    //header検索
    const headerSearch = document.getElementById("headerSearch");
    headerSearch.addEventListener("keydown", function () {
        if (event.key == "Enter") {
            window.location.href = "../search/" + headerSearch.value.replace(/ /g, "+");
        }
    })
    function videoTemplete(v) {
        const templete = `<div class="r-video">
            <img src="../../api/image?id=${v.videoId}" alt="Thumbnail" class="v-Thumbnail">
                <div class="video-data">
                    <p class="v-title">${v.title}</p>
                    <div class="v-name">
                        <p>${v.author}</p>
                    </div>
                    <p>${v.viewCount} 回視聴</p>
                </div>
        </div>`
        return templete;
    }

    function commentTemplate(data, isReply, isLast) {
        console.log(data);
        const templete = `<div ${data.replies == undefined ? "" : "id=" + data.replies.continuation} class="comment" style="${isReply ? "margin-left: 45px" : "margin-left: 0px"}">
                    <div class="contributor">
                        <img src="${data.authorThumbnails[0].url}"
                            alt="icon" class="c-icon">
                        <a src=".. ${data.authorUrl}">${data.author}</a>
                        <img src="../../icons/verified" alt="verified" class="c-verified" style="${data.verified ? "display: block;" : "display: none;"}">
                        <img src="../../icons/pin" alt="verified" class="c-verified" style="${data.isPinned ? "display: block;" : "display: none;"}">
                        <p class="edit-msg" style="${data.isEdited ? "display: block;" : "display: none;"}">(編集済み)</p>
                        <p>${data.publishedText}</p>
                    </div>
                    <p class="c-content">${data.contentHtml}</p>
                    <div class="comment-info">
                        <img src="../../icons/good" alt="good: " class="c-like">
                        <p>${data.likeCount}</p>
                        <div class="creator-heart">
                            <img src="${data.creatorHeart == undefined ? "" : data.creatorHeart.creatorThumbnail}"
                                alt="icon" class="c-heart-icon" style="display: ${data.creatorHeart == undefined ? "none" : "block"}">
                            <img src="../../icons/heart" alt="heart" class="c-heart" style="${data.creatorHeart == undefined ? 'display: none";' : 'display: flex;"'}>
                        </div>
                    </div>
                    <p class="reply" style="display: ${data.replies == undefined ? "none" : "block" }" id="${data.commentId}" onclick="loadReply('${data.replies == undefined ? "" : data.replies.continuation}', '${data.commentId}')">${data.replies == undefined ? 0 : data.replies.replyCount} 件の返信を表示</p></div>
                    <button type="button" style="display=${isLast ? "block" : "none"}">コメントをさらに読み込む<button>`
                    console.log(templete);
        return templete;
    }

    const videoDatas = {
        title: document.getElementById("video-title"),
        viewCount: document.getElementById("view-count"),
        releaseDate: document.getElementById("release-date"),
        likeCount: document.getElementById("like-count"),
        author: document.getElementById("author"),
        subCountText: document.getElementById("subCountText"),
        authorIcon: document.getElementById("author-icon"),
        desc: document.getElementById("desc"),
        recommendedVideos: document.getElementById("recommended"),
        videoContent: document.getElementById("video-content"),
        loadAnim: document.getElementById("load-anim"),
        videoThumbnail: document.getElementById("video-thumbnail"),
        comments: document.getElementById("comments")
    }

    async function loadReply(continuation, commentId) {
        try {
        const response = await fetch("../../api/videos/" + videoId + "/comments/" + continuation);
        const commentData = await response.json();
        document.getElementById(commentId).style.display = "none";
        commentData.comments.forEach((comment, index) => {
            document.getElementById(continuation).insertAdjacentHTML("beforeend", commentTemplate(comment, true));
        })} catch (error) {
            console.error("エラーが発生しました。", error);
        }
    }

    let data;
    let commentData;
    const videoId = "<%- videoId %>";
    setData();
    setComment();

    async function setComment() {
        try {
            const response = await fetch("../../api/videos/" + videoId + "/comments");
            const commentData = await response.json();
            commentData.comments.forEach((comment, index) => {
                videoDatas.comments.insertAdjacentHTML("beforeend", commentTemplate(comment, false, (commentData.comments.length == index)));
            })
        } catch (error) {
            console.error("エラーが発生しました。", error);
        }
    }
    async function setData() {
        try {
            const response = await fetch("../../api/videos/" + videoId);
            const videoData = await response.json();
            data = videoData;
            videoDatas.title.textContent = videoData.title;
            videoDatas.viewCount.textContent = videoData.viewCount + " 回視聴";
            videoDatas.likeCount.textContent = videoData.likeCount;
            videoDatas.releaseDate.textContent = videoData.publishedText;
            videoDatas.author.textContent = videoData.author;
            videoDatas.subCountText.textContent = "登録者数 " + videoData.subCountText + " 人";
            videoDatas.authorIcon.src = videoData.authorThumbnails[0].url;
            videoDatas.authorIcon.alt = videoData.author;
            if (videoData.description == "") {
                videoDatas.desc.style.display = "none";
            } else {
                videoDatas.desc.textContent = videoData.description;
            }
            videoDatas.videoThumbnail.src = `../../api/image?id=${videoId}&q=max`;
            console.log(videoData)
            if (videoData.recommendedVideos.length < 1) {
                videoDatas.recommendedVideos.style.display = "none";
                videoDatas.comments.style.width = "100%";
            }
            videoData.recommendedVideos.forEach(v => {
                videoDatas.recommendedVideos.insertAdjacentHTML("beforeend", videoTemplete(v));
                const last = Array.from(videoDatas.recommendedVideos.children);
                last[last.length - 1].addEventListener("click", () => {
                    window.location.href = "../watch/" + v.videoId;
                })
            });

        } catch (error) {
            console.error("エラーが発生しました。", error);
        }
    }

    function channelbtn() {
        window.location.href = ".." + data.authorUrl;
    }

    function thumbnailLoaded() {
        videoDatas.videoContent.style.display = "block";
        videoDatas.loadAnim.style.display = "none";
    }
</script>

</html>