<html lang="ja">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>LiteYoutube</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400&display=swap');

        * {
            padding: 0;
            margin: 0;
            font-family: 'Noto Sans JP', sans-serif;
        }

        header {
            background: rgba(255, 255, 255, 0.84);
            border-radius: 16px;
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(8.3px);
            -webkit-backdrop-filter: blur(8.3px);
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            color: rgb(0, 0, 0);
            font-size: 10px;

            h1 {
                margin-left: 20px;
            }

            a {
                text-decoration: none;
                color: #000000;
            }

            input {
                border: none;
                font-size: 16px;
                width: 2rem;
                height: 2rem;
                border-radius: 5px;
                padding-left: 2rem;
                background: no-repeat left .5em center / 1em url("../../icons/search");
                cursor: pointer;
                transition: width 0.2s, margin 0.2s;
                margin-right: 5px;

                &:hover {
                    background-color: #dfdfdf;
                }

                &:focus {
                    width: 10rem;
                    margin-left: 0;
                    outline: 1px #000000;
                    border: 1px solid #b3b3b3;
                    cursor: text;
                    background-color: white;
                }
            }

            .buttons {
                display: flex;
                align-items: center;
                justify-content: center;
                margin-right: 5rem;
            }

            a {
                background-color: #ffffff;
                min-width: 2rem;
                min-height: 2rem;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;

                &:hover {
                    border-radius: 5px;
                    background-color: #dfdfdf;
                }
            }

            h1 {
                padding-left: 2px;
                padding-right: 2px;
                min-width: 140px;
                width: auto;
            }

            img {
                width: 17px;
                user-select: none;
                -webkit-user-drag: none;
                -moz-user-select: none;
            }
        }

        body {
            background-color: rgb(255, 255, 255)
        }

        main {
            h1 {
                margin-top: 5rem;
                margin-bottom: 3rem;
                text-align: center;
            }




            a {
                text-decoration: none;
                color: #000000;
                margin-left: 5px;
                font-size: 16px;
                width: 100%;
                height: 35px;
                display: flex;
                align-items: center;
            }






            .center {
                display: flex;
                text-align: left;
                position: relative;
            }

        }



        ul {
            list-style: none;
        }

        li {
            cursor: pointer;
            overflow-wrap: break-all;
            display: flex;
            background-color: #ffffff;
            margin-left: 20%;
            margin-right: 20%;
            border-radius: 10px;
            width: 60%;
            height: 200px;
            border: 1px solid #dfdfdf;
            margin-bottom: 1rem;
            transition: all;
            transition-duration: .2s;

            &:hover {
                background-color: #dfdfdf;
            }

            .icon {
                width: 120px;
                height: 120;
                border-radius: 100px;
                margin-top: 40px;
                margin-left: 20px;
                user-select: none;
                -webkit-user-drag: none;
                -moz-user-select: none;
            }

            .verified {
                width: 16px;
                height: 16px;
                margin-left: 5px;
                margin-top: 1rem;
                user-select: none;
                -webkit-user-drag: none;
                -moz-user-select: none;
            }

            p {
                margin-top: 0.6rem;
                font-size: 18px;
                margin-left: 1rem;
            }

            .c-name {
                display: flex;
                margin-top: 1rem;
            }

            .Thumbnail {
                display: flex;
                margin-top: 10px;
                margin-left: 10px;
                border-radius: 8px;
                height: 180px;
                width: auto;
                user-select: none;
                -webkit-user-drag: none;
                -moz-user-select: none;
            }

            .v-name {
                display: flex;
                margin-top: 1.5rem;
            }

            .title {
                width: calc(100% - 2rem);
                overflow-wrap: break-all;
            }

            .desc {
                width: calc(100% - 2rem);
                overflow-wrap: break-all;
            }

            .video-info {
                padding-left: -50%;
                margin-top: 6rem;
                overflow-wrap: break-all;
            }
        }

        .video-data,
        .playlist-data {
            flex-grow: 1;
        }

        footer {
            margin-left: 20%;
            margin-right: 20%;
            width: 60%;
            margin-bottom: 100px;
            margin-top: 10px;

            button {
                cursor: pointer;
                border: 1px solid #dfdfdf;
                background: white;
                width: 90%;
                margin-left: 5%;
                margin-right: 5%;
                height: 50px;
                border-radius: 5px;
                user-select: none;
                transition: all;
                transition-duration: 0.2s;

                &:hover {
                    background-color: #dfdfdf;
                }
            }
        }
    </style>
</head>

<body>
    <header>
        <h1><a href="/">LiteYoutube</a></h1>
        <div class="buttons">
            <input type="text" placeholder="search" id="headerSearch">
            <a href="../../settings"><img src="../../icons/settings" alt="settings"></a>
        </div>
    </header>
    <main>
        <h1>
            <%= searchWord %>の検索結果
        </h1>
        <ul id="results">
        </ul>
        <footer>
            <button type="button" onclick="load(lastPage);">もっっっと見る</button>
        </footer>
    </main>
</body>
<script>
    function channelTemplate(data) {
        const templete =
            `<li class="channel">
                <img src="${data.authorThumbnails[0].url}"
                    alt="" class="icon">
                <div class="info-all">
                    <div class="c-name">
                        <p>${data.author}</p>
                        <img src="../../icons/verified" alt="verified" class="verified" style="${data.authorVerified ? "display:block" : "display:none;" /*10万人以上の場合のみ表示*/}">
                        <p>${data.channelHandle}</p>
                    </div>
                    <div class="c-info">
                        <p>登録者数 ${data.subCount}人</p>
                        <p class="desc">${data.description}</p>
                    </div>
                </div>
            </li>`;
        return templete;
    }

    function videoTemplete(data) {
        const templete = `<li class="video">
                <img src="${data.videoThumbnails[4].url}" alt="Thumbnail" class="Thumbnail">
                <div class="video-data">                
                <p class="title">${data.title}</p>
                <div class="v-name">
                    <p>${data.author}</p>
                    <img src="../../icons/verified" alt="verified" class="verified" style="${data.authorVerified ? "display:block" : "display:none;" /*10万人以上の場合のみ表示*/}">
                </div>
                    <p>${data.viewCount} 回視聴</p>
                    <p>${data.publishedText}</p>
                </div>
            </li>`;
        return templete;
    }
    function playlistTemplete(data) {
        const templete = `<li class="playlist">
                <img src="${data.playlistThumbnail}" alt="Thumbnail" class="Thumbnail">
                <div class="playlist-data">
                <p class="title">${data.title}</p>
                <div class="v-name">
                    <p>${data.author}</p>
                    <img src="../../icons/verified" alt="verified" class="verified" style="${data.authorVerified ? "display:block" : "display:none;" /*10万人以上の場合のみ表示*/}">
                </div>
                    <p>${data.videoCount} 本の動画</p>
                    <p>再生リスト</p>
                </div>
            </li>`;
        return templete;
    }
    let lastPage = Number("<%- page -1%>");
    const headerSearch = document.getElementById("headerSearch");
    const results = document.getElementById("results");

    headerSearch.addEventListener("keydown", function () {
        if (event.key == "Enter") {
            window.location.href = "../../search/" + headerSearch.value.replace(/ /g, "+");
        }
    });
    load(lastPage);
    async function GetData(page) {
        try {
            const apiUrl = "<%- apiUrl %>" + `/${page}`;
            const response = await fetch(apiUrl);
            const data = await response.json();
            return data;
        } catch (err) {
            console.error("Error:", err);
        }
    }
    async function load() {
        lastPage++; //ページを増やす
        console.log(lastPage)
        const data = await GetData(lastPage);
        if (data) {
            data.forEach(dataItem => {
                if (dataItem.type == "channel") {
                    results.innerHTML += channelTemplate(dataItem);
                } else if (dataItem.type == "video") {
                    results.innerHTML += videoTemplete(dataItem);
                } else if (dataItem.type == "playlist") {
                    results.innerHTML += playlistTemplete(dataItem);
                }
            });
        }
    };


    // async function内での処理



</script>

</html>