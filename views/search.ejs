<html lang="ja">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>SimpleTube</title>
    <link rel="stylesheet" href="../../styles/search">
</head>

<body>
    <header>
        <h1><a href="/">SimpleTube</a></h1>
        <div class="buttons">
            <input type="text" placeholder="search" id="headerSearch">
            <a href="/settings"><img src="/icons/settings" alt="settings"></a>
        </div>
    </header>
    <main>
        <h1>
            <%= searchWord %>の検索結果
        </h1>
        <ul id="results">
        </ul>
        <footer>
            <button type="button" onclick="load(lastPage);" id="more">もっと見る</button>
            <div id="load-anim">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="48" height="48">
                    <circle cx="12" cy="12" r="10" fill="none" stroke="#2589d0" stroke-width="2" stroke-dasharray="63"
                        stroke-linecap="round">
                        <animate attributeName="stroke-dashoffset" values="63;16;63" keyTimes="0;.5;1"
                            keySplines=".42 0 .58 1;.42 0 .58 1;" calcMode="spline" dur="1.4s"
                            repeatCount="indefinite" />
                        <animateTransform attributeName="transform" type="rotate" values="0,12,12;135,12,12;450,12,12"
                            keySplines=".42 0 .58 1;.42 0 .58 1;" calcMode="spline" dur="1.4s"
                            repeatCount="indefinite" />
                        <animateTransform attributeName="transform" type="rotate" from="0,12,12" to="270,12,12"
                            calcMode="linear" dur="1.4s" repeatCount="indefinite" additive="sum" />
                    </circle>
                </svg>
            </div>
        </footer>
    </main>
</body>
<script>
    function channelTemplate(data) {
        const templete =
            `<li class="channel">
                <img src="${"https:" + data.authorThumbnails[0].url}"
                    alt="" class="icon">
                <div class="info-all">
                    <div class="c-name">
                        <p>${data.author}</p>
                        <img src="../../icons/verified" alt="verified" class="verified" style="${data.authorVerified ? "display:block" : "display:none;" /*10万人以上の場合のみ表示*/}">
                        <p>${data.channelHandle}</p>
                    </div>
                    <div class="c-info">
                        <p>登録者数 ${data.subCount}人</p>
                        <p class="desc">${data.description}</p>
                    </div>
                </div>
            </li>`;
        return templete;
    }

    function videoTemplete(data) {
        const templete = `<li class="video">
                <img src="${"../../api/image?id=" + data.videoThumbnails[4].url.split('/')[4]}" alt="Thumbnail" class="Thumbnail">
                <div class="video-data">                
                <p class="title">${data.title}</p>
                <div class="v-name">
                    <p>${data.author}</p>
                    <img src="../../icons/verified" alt="verified" class="verified" style="${data.authorVerified ? "display:block" : "display:none;" /*10万人以上の場合のみ表示*/}">
                </div>
                    <p>${data.viewCount} 回視聴</p>
                    <p>${data.publishedText}</p>
                </div>
            </li>`;
        return templete;
    }
    function playlistTemplete(data) {
        const templete = `<li class="playlist">
                <img src="${data.playlistThumbnail}" alt="Thumbnail" class="Thumbnail">
                <div class="playlist-data">
                <p class="title">${data.title}</p>
                <div class="v-name">
                    <p>${data.author}</p>
                    <img src="../../icons/verified" alt="verified" class="verified" style="${data.authorVerified ? "display:block" : "display:none;" /*10万人以上の場合のみ表示*/}">
                </div>
                    <p>${data.videoCount} 本の動画</p>
                    <p>再生リスト</p>
                </div>
            </li>`;
        return templete;
    }
    let lastPage = Number("<%- page -1%>");

    const headerSearch = document.getElementById("headerSearch");
    let results = document.getElementById("results");
    const more = document.getElementById("more");
    const load_anim = document.getElementById("load-anim");

    headerSearch.addEventListener("keydown", function () {
        if (event.key == "Enter") {
            window.location.href = "../../search/" + headerSearch.value.replace(/ /g, "+");
        }
    });
    load();
    async function GetData(page) {
        more.style.display = "none";
        load_anim.style.display = "block";
        try {
            const apiUrl = "<%- apiUrl %>" + `/${page}`;
            const response = await fetch(apiUrl);
            const data = await response.json();
            more.style.display = "block";
            load_anim.style.display = "none";
            return data;
        } catch (err) {
            console.error("Error:", err);
        }
    }

    async function load() {
        lastPage++;
        const data = await GetData(lastPage);
        if (data) {
            data.forEach((dataItem, index) => {
                let result;
                if (dataItem.type == "channel") {
                    results.insertAdjacentHTML("beforeend", channelTemplate(dataItem));
                    const lastResult = Array.from(document.getElementById("results").children);
                    result = lastResult[lastResult.length - 1];
                } else if (dataItem.type == "video") {
                    results.insertAdjacentHTML("beforeend", videoTemplete(dataItem));
                    const lastResult = Array.from(document.getElementById("results").children);
                    result = lastResult[lastResult.length - 1];
                } else if (dataItem.type == "playlist") {
                    results.insertAdjacentHTML("beforeend", playlistTemplete(dataItem));
                    const lastResult = Array.from(document.getElementById("results").children);
                    result = lastResult[lastResult.length - 1];
                }
                result.addEventListener("click", function () {
                    window.location.href = dataItem.type == "channel" ? "../.." + dataItem.authorUrl : dataItem.type == "video" ? "../../watch/" + dataItem.videoId : "../../playlist/" + dataItem.playlistId;
                });
            });
        }
    };
</script>

</html>